---
layout: default.hbs
styles: ['index.css']
scripts: []
---

{{#markdown}}
## Links

### Article

- [High Performance Web Sites](http://stevesouders.com/hpws/rules.php)
- [ブラウザのしくみ: 最新ウェブブラウザの内部構造 - HTML5 Rocks](http://www.html5rocks.com/ja/tutorials/internals/howbrowserswork/)
- [Automating Web Performance Measurement - HTML5Rocks Updates](http://updates.html5rocks.com/2014/06/Automating-Web-Performance-Measurement)
- [Reflows & Repaints: CSS Performance making your JavaScript slow? | Stubbornella](http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/)
- [Long Life Web Performance Optimization ~ 心理学から考えるWebパフォーマンス ~ — MOL](http://t32k.me/mol/log/long-life-web-performance-optimization/)
- [On Mobile, Data URIs are 6x Slower than Source Linking (New Research) | Mobify](http://www.mobify.com/blog/data-uris-are-slow-on-mobile/)
- [パフォーマンス最適化 | CSS Radar | Little Books For Front End Developers](http://css.studiomohawk.com/optimization/2011/04/09/why_speed_matters/)
- [コンテンツのロードを高速化するHTML5の「link prefetching」機能  «  DailyHckr](http://hylom.net/2010/06/03/html5_link_prefetch/)
- [プログレッシブレンダリングでUXを向上させるJS非同期読み込みのベストプラクティス | ゆっくりと…](http://tokkono.cute.coocan.jp/blog/slow/index.php/xhtmlcss/best-practice-of-truly-async-js-loading/)
- [サイト速度とonload再考 | ゆっくりと…](http://tokkono.cute.coocan.jp/blog/slow/index.php/xhtmlcss/rivisiting-onload/)
- [How the Browser Pre-loader Makes Pages Load Faster - Andy Davies](http://andydavies.me/blog/2013/10/22/how-the-browser-pre-loader-makes-pages-load-faster/)
- [ReFlowの原因とマークアップの最適化 «  LINE Engineers' Blog](http://tech.naver.jp/blog/?p=379)
- [ブラウザ動作の理解－リフローとリペイント及びその最適化 | ゆっくりと…](http://tokkono.cute.coocan.jp/blog/slow/index.php/web-technology/reflow-and-repaint-in-browser/)
- [CSS vs. JS Animation: Which is Faster?](http://davidwalsh.name/css-js-animation)
- [サイト高速化の「戦略」と「戦術」- GradeAのその先へ | ゆっくりと…](http://tokkono.cute.coocan.jp/blog/slow/index.php/xhtmlcss/strategy-and-tactics-for-faster-site/)
- [How gzip compression works - Make the Web Faster — Google Developers](https://developers.google.com/speed/articles/gzip)
- [Scrolling Performance - HTML5 Rocks](http://www.html5rocks.com/en/tutorials/speed/scrolling/?redirect_from_locale=ja)
- [Lazyload Images - PageSpeed Module — Google Developers](https://developers.google.com/speed/pagespeed/service/LazyloadImages)
- [Introduction to the Resource Timing API](http://www.sitepoint.com/introduction-resource-timing-api/)
- [How To Make Your Websites Faster On Mobile Devices | Smashing Magazine](http://www.smashingmagazine.com/2013/04/03/build-fast-loading-mobile-website/)
- [Navigation Timingを使ってパフォーマンス計測（Google アナリティクス） — MOL](http://t32k.me/mol/log/measuring-web-performance/)
- [On Mobile, Data URIs are 6x Slower than Source Linking (New Research)](http://www.mobify.com/blog/data-uris-are-slow-on-mobile/)


#### JavaScript

- [Loading Scripts Without Blocking | High Performance Web Sites](http://www.stevesouders.com/blog/2009/04/27/loading-scripts-without-blocking/)
- [Memory Management in JS Web Apps](http://blog.alexmaccaw.com/jswebapps-memory-management)
- [Tumblrの省メモリーな無限スクロール - 記録](http://vzvu3k6k.tk/memo/2014/04/26/tumblr-ghostlist.html)
- [JavaScript アプリケーションのメモリー・リークを理解する](http://www.ibm.com/developerworks/jp/web/library/wa-jsmemory/)
- [  DOM access optimization / Stoyan's phpied.com](http://www.phpied.com/dom-access-optimization/)
- [Script-injected "async scripts" considered harmful - igvita.com](https://www.igvita.com/2014/05/20/script-injected-async-scripts-considered-harmful/)
- [モバイル環境でDOM挿入する時innerHTMLとappendNodeどっちが速いの？という話 - mizchi's blog](http://mizchi.hatenablog.com/entry/2014/05/20/005039)
- [How to Trace JavaScript Performance Using Your Developer Console](http://www.sitepoint.com/javascript-performance-developer-console/)
- [Thinking Async | CSS-Tricks](http://css-tricks.com/thinking-async/)


#### CSS

- [Efficiently Rendering CSS | CSS-Tricks](http://css-tricks.com/efficiently-rendering-css/)
- [uncss:  Find Unused CSS](http://davidwalsh.name/uncss)
- [CSS Sprite画像はDataURI画像にすべきか？ — MOL](http://t32k.me/mol/log/sprite-image-vs-inline-image/)
- [CSS performance test: Flexbox v CSS Table – Fight! - Author and responsive web developer Ben Frain](http://benfrain.com/css-performance-test-flexbox-v-css-table-fight/)
- [【Sassで解決】CSSの@importはどれだけ悪影響なのか自分で試してみる ｜ Developers.IO](http://dev.classmethod.jp/ria/html5/css-import-no-parallel-load-sass/)


### Slide

- [High performance web sites](http://www.slideshare.net/techdude/high-performance-web-sites)
- [High Performance Web Frontend // Speaker Deck](https://speakerdeck.com/ahomu/high-performance-web-frontend)
- [Speed matters - measuring front-end web performance](http://www.slideshare.net/zeman/speed-matters-26675930)
- [Re-think about Web Performance // Speaker Deck](https://speakerdeck.com/1000ch/re-think-about-web-performance)
- [GitHub's CSS Performance // Speaker Deck](https://speakerdeck.com/jonrohan/githubs-css-performance)
- [Supersonic JavaScript // Speaker Deck](https://speakerdeck.com/ariya/supersonic-javascript)
- [Keith and Marios Guide to Fast Websites // Speaker Deck](https://speakerdeck.com/keithpitt/keith-and-marios-guide-to-fast-websites)
- [State of the resource timing api](http://www.slideshare.net/turbobytes/state-of-the-resource-timing-api)
- [Measuring Web Performance - 自己満足で終わらないためのパフォーマンス計測 -](http://www.slideshare.net/t32k/measuring-web-performance-15915024)

### Tool

- [PageSpeed Insights](https://developers.google.com/speed/pagespeed/insights/)
- [YSlow - Official Open Source Project Website](http://yslow.org/)
- [WebPagetest - Website Performance and Optimization Test](http://www.webpagetest.org/)
- [Phantomas by macbre](http://macbre.github.io/phantomas/)
- [axemclion/browser-perf](https://github.com/axemclion/browser-perf)
- [GTmetrix | Website Speed and Performance Optimization](http://gtmetrix.com/)
- [Grunt And Gulp Tasks For Performance Optimization | Yeoman](http://yeoman.io/blog/performance-optimization.html)
- [addyosmani/above-the-fold-css-tools](https://github.com/addyosmani/above-the-fold-css-tools)


#### HTML

- [gruntjs/grunt-contrib-htmlmin](https://github.com/gruntjs/grunt-contrib-htmlmin)
- [kangax/html-minifier](https://github.com/kangax/html-minifier)


#### CSS

- [giakki/uncss](https://github.com/giakki/uncss)
- [gruntjs/grunt-contrib-cssmin](https://github.com/gruntjs/grunt-contrib-cssmin)
- [jonathanepollack/gulp-minify-css](https://github.com/jonathanepollack/gulp-minify-css)
- [geuis/helium-css](https://github.com/geuis/helium-css)
- [jorgebastida/glue](https://github.com/jorgebastida/glue)
- [Ensighten/grunt-spritesmith](https://github.com/Ensighten/grunt-spritesmith)
- [addyosmani/critical](https://github.com/addyosmani/critical)
- [GoalSmashers/clean-css](https://github.com/GoalSmashers/clean-css)


#### JavaScript

- [jsPerf: JavaScript performance playground](http://jsperf.com/)
- [UglifyJS — JavaScript parser, compressor, minifier written in JS](http://lisperator.net/uglifyjs/)
- [gruntjs/grunt-contrib-uglify](https://github.com/gruntjs/grunt-contrib-uglify)


#### Image

- [ImageOptim — better Save For Web](https://imageoptim.com/)
- [TinyPNG – Compress PNG images while preserving transparency](https://tinypng.com/)
- [OptiPNG Home Page](http://optipng.sourceforge.net/)
- [ImageAlpha — image minifier (like JPEG with transparency!)](http://pngmini.com/)


#### Monitor

- [SpeedCurve: Monitor front-end performance](http://speedcurve.com/)
- [Web Monitoring | Keynote Systems](http://www.keynote.com/solutions/monitoring/web-monitoring)
- [Pingdom - Website Monitoring](https://www.pingdom.com/)
{{/markdown}}
